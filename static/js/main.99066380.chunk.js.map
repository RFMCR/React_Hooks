{"version":3,"sources":["context/ThemeContext.js","components/Header.jsx","components/Search.jsx","hooks/useCharacters.js","components/Characters.jsx","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","React","createContext","Header","useContext","context","setcontext","mode","className","type","onClick","Search","search","searchInput","handleSearch","value","ref","onChange","useCharacters","url","useState","characters","setCharacters","useEffect","fetch","then","response","json","data","results","catch","error","console","warn","initialState","favoritesarray","favoriteReducer","state","action","filter","user","id","payload","length","Characters","params","theme","useReducer","favorites","dispatch","setsearch","useRef","useCallback","current","filteredUsers","useMemo","name","toLowerCase","includes","map","favorite","character","style","backgroundImage","image","species","origin","location","created","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99066380.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ThemeContext = React.createContext(null);\r\n\r\nexport default ThemeContext;\r\n","import React, { useContext } from \"react\";\r\nimport ThemeContext from \"../context/ThemeContext\";\r\n\r\nconst Header = () => {\r\n  const [context, setcontext] = useContext(ThemeContext);\r\n  const mode = context === \"light\" ? false : true;\r\n\r\n  const handleClick = () => {\r\n    setcontext(context === \"light\" ? \"dark\" : \"light\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"Header\">\r\n      <h1>Rick and Morty</h1>\r\n      <button type=\"button\" onClick={handleClick} className={!mode ? \"btnlight\" : \"btndark\"}>\r\n        {!mode ? \"Dark Mode\" : \"Light Mode\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default function Search({ search, searchInput, handleSearch }) {\r\n  return (\r\n    <div className=\"Search\">\r\n      <input type=\"text\" value={search} ref={searchInput} onChange={handleSearch}></input>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useCharacters = (url) => {\r\n  const [characters, setCharacters] = useState([]);\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => setCharacters(data.results))\r\n      .catch((error) => console.warn(\"Error in fetch: \", error));\r\n  }, [url]);\r\n  return characters;\r\n};\r\n\r\nexport default useCharacters;\r\n","import React, { useState, useContext, useReducer, useMemo, useRef, useCallback } from \"react\";\r\nimport ThemeContext from \"../context/ThemeContext\";\r\nimport Search from \"../components/Search\";\r\nimport useCharacters from \"../hooks/useCharacters\";\r\n\r\nconst initialState = {\r\n  favoritesarray: [],\r\n};\r\n\r\nconst API = \"https://rickandmortyapi.com/api/character/\";\r\n\r\n//Usando reducer se van a agregar las cartas seleccionadas a los favoritos\r\n//El dispatch transmite la informacion al estado\r\nconst favoriteReducer = (state, action) => {\r\n  debugger;\r\n  switch (action.type) {\r\n    case \"ADD_TO_FAVORITE\":\r\n      let favoriteexist = state.favoritesarray.filter((user) => user.id === action.payload.id);\r\n      if (favoriteexist.length > 0) {\r\n        return state;\r\n      } else {\r\n        return {\r\n          ...state,\r\n          favoritesarray: [...state.favoritesarray, action.payload],\r\n        };\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Characters = (params) => {\r\n  //This line was moved to a new component\r\n  //const [characters, setcharacters] = useState([]);\r\n  const [theme, settheme] = useContext(ThemeContext);\r\n  //Creates the hook to the reducer\r\n  const [favorites, dispatch] = useReducer(favoriteReducer, initialState);\r\n\r\n  const characters = useCharacters(API);\r\n\r\n  const [search, setsearch] = useState(\"\");\r\n  const searchInput = useRef(null);\r\n\r\n  //This uas moved to a new component\r\n  // useEffect(() => {\r\n  //   fetch(\"https://rickandmortyapi.com/api/character/\")\r\n  //     .then((response) => response.json())\r\n  //     .then((data) => setcharacters(data.results));\r\n  // }, []);\r\n\r\n  //Calls the reduce dispatch\r\n  const handleClick = (favorite) => {\r\n    dispatch({ type: \"ADD_TO_FAVORITE\", payload: favorite });\r\n  };\r\n\r\n  // const handleSearch = (event) => {\r\n  //   setsearch(event.target.value);\r\n  // };\r\n\r\n  // //Se reemplaza la funcion para usar el useRef, mas facil en el uso de los formularios\r\n  // const handleSearch = () => {\r\n  //   setsearch(searchInput.current.value);\r\n  // };\r\n\r\n  //Se vuelve a reemplazar para usar usecallback\r\n  const handleSearch = useCallback(() => {\r\n    setsearch(searchInput.current.value);\r\n  }, []);\r\n\r\n  // const filteredUsers = characters.filter((user) => {\r\n  //   return user.name.toLowerCase().includes(search.toLowerCase());\r\n  // });\r\n\r\n  const filteredUsers = useMemo(\r\n    () =>\r\n      characters.filter((user) => {\r\n        return user.name.toLowerCase().includes(search.toLowerCase());\r\n      }),\r\n    [characters, search]\r\n  );\r\n\r\n  return (\r\n    // <div className={params.mode ? \"Characters light\" : \"Characters dark\"}>\r\n    <div>\r\n      <h3>My Favorites</h3>\r\n      {favorites.favoritesarray.map((favorite) => (\r\n        <li key={favorite.id}>{favorite.name}</li>\r\n      ))}\r\n      <hr />\r\n      <h3>Full List</h3>\r\n      <Search search={search} searchInput={searchInput} handleSearch={handleSearch} />\r\n      <div className={`Characters ${theme}`}>\r\n        {filteredUsers.map((character) => (\r\n          <div key={character.id} className=\"Cards\">\r\n            <div className=\"flip-card-inner\">\r\n              {/* <div className={params.mode ? \" light flip-card-front\" : \"dark flip-card-front\"}> */}\r\n              <div className={`flip-card-front ${theme}`}>\r\n                <h2>{character.name}</h2>\r\n                <div className=\"parent\">\r\n                  <div className=\"clip\" style={{ backgroundImage: `url(${character.image})` }}></div>\r\n                  <div className=\"image\" style={{ backgroundImage: `url(${character.image})` }}></div>\r\n                </div>\r\n                <p>\r\n                  <b>Species:</b>\r\n                  {character.species}\r\n                </p>\r\n              </div>\r\n              {/* <div className={params.mode ? \"light flip-card-back\" : \" dark flip-card-back\"}> */}\r\n              <div className={`flip-card-back ${theme}`}>\r\n                <b>Origin: </b>\r\n                <p>{character.origin.name}</p>\r\n                <b>Location: </b>\r\n                <p>{character.location.name}</p>\r\n                <p>\r\n                  <b>Created: </b>\r\n                  {character.created}\r\n                </p>\r\n                <button type=\"button\" onClick={() => handleClick(character)}>\r\n                  Make Favorite\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Characters;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Characters from \"./components/Characters\";\nimport ThemeContext from \"./context/ThemeContext\";\n\nfunction App() {\n  // const [darkmode, setdarkmode] = useState(false);\n  const [context, setcontext] = useState(\"light\");\n\n  return (\n    <ThemeContext.Provider value={[context, setcontext]}>\n      {/* <div className={darkmode ? \"App light\" : \"App dark\"}> */}\n      <div className={`App ${ThemeContext}`}>\n        {/* <Header mode={darkmode} setmode={(mode) => setdarkmode(mode)} /> */}\n        <Header />\n        <hr />\n        <Characters />\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}